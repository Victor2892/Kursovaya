/**
* @file Generator.h
* @author Мещеряков В.А.
* @version 1.0
* @date 08.05.2021
* @copyright ИБСТ ПГУ
* @brief Описание класса "Generator"
*/

#pragma once
#include <vector>
#include <iostream>
#include "GeneratorError.h"
using namespace std;
/**
* @brief Класс, который реализует генерацию псевдослучайной последовательности чисел на базе
регистра сдвига с линейной обратной связью с разрядностью 32 бит в конфигурации Фибоначчи.
*/
class Generator
{
private:
    vector<uint32_t> baseRegister; ///< атрибут, предназначенный для хранения базового регистра
    const uint32_t bitDepth = 32; ///< атрибут, хранящий информацию о разрядности генерируемых чисел
    const vector<uint32_t> defaultRegister = {1,0,1,0,1,0,0,0,1,1,1,0,0,1,0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1}; ///< атрибут, хранящий регистр по умолчанию
public:
    /// @brief Конструктор по умолчанию
    Generator() = default;
    /// @brief Деструктор по умолчанию
    ~Generator() = default;
    /** @brief Метод, который устанавливает в атрибут "baseRegister" регистр по умолчанию с именем "defaultRegister"
     */
    void useDefaultRegister ();
    /** @brief Метод, выполняющий валидацию введённого пользователем регистра и заполняющий атрибут "baseRegister"
        @param std::string Register - регистр в виде строки, состоящей из единичных и нулевых битов
        @throw GeneratorError, если:
         * - регистр не соответсвует нужной длине <br>
         * - регистр состоит полностью из нулей <br>
         * - в регистре используются недопустимые символы
     */
    void setBaseRegister(const string Register);
    /** @brief Метод, предназначенный для генерации последовательности псевдослучайных чисел
        @param count - целочисленное число, которое показывает количество генерируемых чисел
        @details Генерация псевдослучайной последовательности чисел происходит на базе
        регистра сдвига с линейной обратной связью с разрядностью 32 бит в конфигурации Фибоначчи. При генерации
        используется следующая отводная последовательность: (32,7,5,3,2,1,0).
        @throw GeneratorError, если пользователь укажет некорректное количество генерируемых чисел, то есть ненатуральное число
    */
    void generation(const int count);
};
